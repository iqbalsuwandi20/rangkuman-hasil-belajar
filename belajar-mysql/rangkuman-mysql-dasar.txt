DATABASE MYSQL DASAR

contoh nama database adalah belajar_mysql

create database belajar_mysql;  = cara membuat database baru
show databases;                 = cara melihat database yang sudah dibuat
drop database belajar_mysql;    = cara menghapus database yang sudah dibuat (table juga hilang)
use belajar_mysql;              = cara masuk ke dalam database

tipe data number ada 2 yaitu int dan floating point

tipe data string ada 2 yaitu char dan varchar 

SHOW ENGINES;                   = cara melihat daftar storage engines
SHOW TABLES;                    = cara melihat isi didalam table (harus use database terlebih dahulu)

cara membuat table contoh nama tablenya adalah barang

CREATE TABLE barang
(
    kode INT NOT NULL,
    nama VARCHAR(100) NOT NULL,
    harga INT NOT NULL DEFAULT 0,
    jumah INT NOT NULL DEFAULT 0
) ENGINE = InnoDB;
lalu jika ingin melihat tablenya gunakan SHOW TABLES;
DESC barang;                    = cara melihat isi table yang sudah dibuat

mengubah isi table
ALTER TABLE barang 
    ADD COLUMN nama_column TEXT, (menambah)
    DROP COLUMN nama, (menghapus)
    RENAME COLUMN nama TO nama_baru, (ganti nama)
    MODIFY nama VARCHAR(100) AFTER jumah, (mengganti isi table lalu ditaro setelah jumlah)
    MODIFY nama VARCHAR(100) FIRST; (mengganti isi table dipindahkan ke depan)

ALTER TABLE barang
MODIFY jumah INT NOT NULL DEFAULT 0;

ALTER TABLE barang
MODIFY harga INT NOT NULL DEFAULT 0;

ALTER TABLE barang
ADD waktu_dibuat TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP; (TIMESTAMP untuk waktu, CURRENT_TIMESTAMP untuk waktu saat dibuat)

INSERT INTO barang (kode, nama) VALUES (1, 'Apel'); (menambah value ke dalam table)
SELECT * FROM barang; (melihat isi value yang sudah di tambah)

TRUNCATE barang; (menghapus value yang didalam table)

DROP TABLE barang; (untuk menghapus table secara permanen)

CREATE TABLE products
(
    id          VARCHAR(10) NOT NULL,
    name        VARCHAR(100) NOT NULL,
    description TEXT,
    price       INT UNSIGNED NOT NULL, (UNSIGNED itu tidak boleh negatif)
    quantity    INT UNSIGNED NOT NULL DEFAULT 0,
    created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id) (untuk membuat kode unik agar tidak bisa di duplikat)
) ENGINE = InnoDB;

INSERT INTO (untuk memasukkan data ke dalam table)
INSERT INTO products(id, name, price, quantity)
VALUES ('P0001', 'Mie Ayam Original', 15000, 100);

INSERT INTO products(id, name, description, price, quantity)
VALUES ('P0002', 'Mie Ayam Bakso', 'Mie Ayam Original + Bakso', 20000, 100);

memasukkan data sekaligus
INSERT INTO products(id, name, price, quantity)
VALUES ('P0003', 'Mie Ayam Ceker', 20000, 100), 
('P0004', 'Mie Ayam Spesial', 25000, 100),
('P0005', 'Mie Ayam Yamin', 15000, 100);

SELECT * FROM products; (bintang artinya mengambil semua data di table)
SELECT id, name, price, quantity FROM products; (mengambil data tertentu di table)

ALTER TABLE products
    ADD PRIMARY KEY (id);
DESC products; (untuk melihat PRIMARY KEY yang sudah dibuat)

WHERE untuk mencari data
SELECT id, name, price, quantity
FROM products
WHERE quantity = 0;

menambah kolom
ALTER TABLE products
    ADD COLUMN category ENUM ('Makanan', 'Minuman', 'Lain-Lain')
        AFTER name;

mengubah satu kolom menggunakan UPDATE dan SET
UPDATE products
SET category = 'Makanan'
WHERE id = 'P0001';

mengubah beberapa kolom
UPDATE products
SET category = 'Makanan',
    description = 'Mie Ayam Original + Ceker'
WHERE id = 'P0003';

mengubah dengan value di kolom
UPDATE products
SET price = price + 5000
WHERE id = 'P0004';

menghapus data
DELETE
FROM products
WHERE id = 'P0009';

alias merubah kata kolom kata kuncinya adalah as 
SELECT 
id AS 'Kode',
name AS 'Nama',
category AS 'Kategori',
price AS 'Harga',
quantity AS 'Jumlah'
FROM products;

alias untuk table
SELECT 
p.id AS 'Kode',
p.name AS 'Nama',
p.category AS 'Kategori',
p.price AS 'Harga',
p.quantity AS 'Jumlah'
FROM products AS p;

INSERT INTO products(id, category, name, price, quantity)
VALUES ('P0006', 'Makanan', 'Bakso Rusuk', 25000, 200),
 ('P0007', 'Minuman', 'Es Jeruk', 10000, 300),
 ('P0008', 'Minuman', 'Es Campur', 15000, 500),
 ('P0009', 'Minuman', 'Es Teh Manis', 5000, 400),
 ('P00010', 'Lain-Lain', 'Kerupuk', 2500, 1000),
 ('P00011', 'Lain-Lain', 'Keripik Udang', 10000, 300),
 ('P00012', 'Lain-Lain', 'Es Krim', 5000, 200),
 ('P00013', 'Makanan', 'Mie Ayam Jamur', 20000, 50),
 ('P00014', 'Makanan', 'Bakso Telor', 20000, 150),
 ('P00015', 'Makanan', 'Bakso Jando', 25000, 300);

mencari data dengan operator perbandingan
SELECT id, name, price, quantity
FROM products
WHERE quantity > 100;

SELECT id, name, price, quantity
FROM products
WHERE quantity >= 100;

SELECT id, name, price, quantity
FROM products
WHERE quantity != 100;

SELECT id, name, price, quantity
FROM products
WHERE quantity =< 100;

mencari data dengan operator AND
SELECT id, name, price, quantity
FROM products
WHERE quantity > 100 AND price > 10000;

mencari data dengan operator OR 
SELECT ID, name, price, quantity
FROM products
WHERE quantity > 500 OR price > 10000;

menggabungkan AND dan OR dengan prioritas dengan kurung ()
SELECT ID, name, price, quantity
FROM products
WHERE (category = 'Makanan' OR quantity > 500)
    AND price > 10000;

mencari kata menggunakan kata LIKE operator
SELECT *
FROM products
WHERE name LIKE '%Mie%';

mencari menggunakan NULL operator
SELECT *
FROM products
WHERE description IS NULL;

SELECT *
FROM products
WHERE description IS NOT NULL;

mencari menggunakan BETWEEN operator (BETWEEN adalah diantara)
SELECT *
FROM products
WHERE price BETWEEN 10000 AND 20000;

mencari kata menggunakan IN operator
SELECT * 
FROM products
WHERE category IN ('Makanan', 'Minuman');

SELECT * 
FROM products
WHERE category NOT IN ('Makanan', 'Minuman');

mengurutkan data dari beberapa kolom
SELECT
    id, category, price, name FROM products 
        ORDER BY category ASC, price DESC;

membatasi hasil query
SELECT *
FROM products
WHERE price > 0
ORDER BY id
LIMIT 10;

skip hasil query
SELECT *
FROM products
WHERE id > 0
ORDER BY id
LIMIT 2, 2;

menghilangkan data duplikat
SELECT distinct category 
FROM products;

menggunakan arithmetic operator
SELECT 10 + 10 AS hasil;

SELECT id, name, price, price DIV 1000 AS 'Price in K'
FROM products;

menggunakan mathematical function
SELECT PI();

SELECT POWER(10, 2);

SELECT COS(10);
SELECT SIN(10);
SELECT TAN(10);

SELECT id, COS(price), SIN(price), TAN(price) FROM products;

SELECT id, name, price
FROM products
WHERE price DIV 10000 > 15;

membuat table dengan auto increment
CREATE TABLE admin
(
    id          INT NOT NULL AUTO_INCREMENT, (AUTO_INCREMENT harus dibuat menjadi PRIMARY KEY dan langsung membuat urutan id)
    first_name  VARCHAR(100) NOT NULL,
    last_name   VARCHAR(100) NOT NULL,
    PRIMARY KEY (id)
) ENGINE = InnoDB;

memasukan data tanpa id
INSERT INTO admin(first_name, last_name)
VALUES('Iqbal', 'Suwandi'), 
('Steven', 'Garul'), 
('Joko', 'Moro');

melihat id terakhir (melihat id terakhir yg dibuat)
SELECT LAST_INSERT_ID();

INSERT INTO admin(first_name, last_name)
VALUES('Rully', 'Hidayat');

menggunakan string function
SELECT id, 
    LOWER(name) AS 'Name Lower',
    UPPER(name) AS 'Name Upper',
    LENGTH(name) AS 'Name Length'
FROM products;

menambah kolom Timestamp (EXTRACT untuk mengambil sebagian kecil dari Timestamp)
SELECT id, created_at,
    EXTRACT(YEAR FROM created_at) AS Year,
    EXTRACT(MONTH FROM created_at) AS Month
FROM products;

menggunakan control flow case
SELECT id, category,
    CASE category
        WHEN 'Makanan' THEN 'Enak'
        WHEN 'Minuman' THEN 'Seger'
        ELSE 'Apa Itu?'
        END AS 'Category'
FROM products;

menggunakan control flow if
SELECT id, price, 
        IF(price <= 15000, 'Murah',
        IF(price <= 20000, 'Mahal', 'Mahal Banget'))
        AS 'Mahal?'
FROM products;

menggunakan control flow ifnull
SELECT id, name, IFNULL(description, 'Kosong')
FROM products;

menggunakan aggregate function
SELECT COUNT(id) AS 'Total Product' FROM products;
SELECT AVG(price) AS 'Rata-Rata' FROM products;
SELECT MAX(price) AS 'Harga Termahal' FROM products;
SELECT MIN(price) AS 'Harga Termurah' FROM products;
SELECT SUM(quantity) AS 'Toal Stock' FROM products;

menggunakan GROUP BY
SELECT COUNT(id) AS 'Total Product' FROM products GROUP BY category;

menggunakan having clause
SELECT COUNT(id) AS total, category
 FROM products 
 GROUP BY category
 HAVING total > 1;

 membuat table dengan unique constraint
 CREATE TABLE customers
 (
    id          INT          NOT NULL AUTO_INCREMENT,
    email       VARCHAR(100) NOT NULL,
    first_name  VARCHAR(100) NOT NULL,
    last_name   VARCHAR(100),
    PRIMARY KEY (id),
    UNIQUE KEY email_unique (email)
 ) ENGINE = InnoDB;

menambah/menghapus unique constraint
ALTER TABLE customers
DROP CONSTRAINT email_unique;

ALTER TABLE customers
ADD CONSTRAINT email_unique UNIQUE (email);

INSERT INTO customers(email, first_name, last_name)
VALUES ('iqbal@gmail.com', 'Iqbal', 'Suwandi');

membuat table dengan check constraint
CREATE TABLE products
(
    id          VARCHAR(10) NOT NULL,
    name        VARCHAR(100) NOT NULL,
    description TEXT,
    price       INT UNSIGNED NOT NULL, (UNSIGNED itu tidak boleh negatif)
    quantity    INT UNSIGNED NOT NULL DEFAULT 0,
    created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id) (untuk membuat kode unik agar tidak bisa di duplikat)
    CONSTRAINT price_check CHECK (price >= 1000);
) ENGINE = InnoDB;

INSERT INTO products(id, name, category, price, quantity)
VALUES('P00016', 'Permen', 'Lain-Lain', '1000', 1000);

ALTER TABLE products
ADD CONSTRAINT price_check CHECK ( price >= 1000 );

membuat table dengan index
CREATE TABLE sellers
(
    id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    name2 VARCHAR(100),
    name3 VARCHAR(100),
    email VARCHAR(100) NOT NULL,
    PRIMARY KEY (id),
    UNIQUE KEY email_unique (email),
    INDEX name_index (name),
    INDEX name2_index (name2),
    INDEX name3_index (name3),
    INDEX name1_name2_name3_index (name, name2, name3)
) ENGINE = InnoDB;

SELECT * FROM sellers WHERE name = 'X' AND name2 = 'X' AND name3 = 'X';

menambah/menghapus index
ALTER TABLE sellers
ADD INDEX name_index (name);

ALTER TABLE sellers
DROP INDEX name_index;

menambah/menghapus full-text search
ALTER TABLE products
ADD FULLTEXT product_fulltext (name, description);

ALTER TABLE products
DROP INDEX product_fulltext;

mencari dengan natural language mode
SELECT *
FROM products
WHERE MATCH(name, description)
                AGAINST('ayam' IN NATURAL LANGUAGE MODE);

mencari dengan boolean mode
SELECT *
FROM products
WHERE MATCH(name, description)
                AGAINST('+ayam -bakso' IN BOOLEAN MODE);

mencari dengan query expansion mode
SELECT *
FROM products
WHERE MATCH(name, description)
                AGAINST('bakso' WITH QUERY EXPANSION);

membuat table dengan foreign key 
CREATE TABLE wishlist
(
    id          INT         NOT NULL AUTO_INCREMENT,
    id_product  VARCHAR(10) NOT NULL,
    description TEXT,
    PRIMARY KEY (id),
    CONSTRAINT  fk_wishlist_product
        FOREIGN KEY (id_product) REFERENCES products (id)
) ENGINE = InnoDB;

menambah/menghapus foreign key
ALTER TABLE wishlist
    DROP CONSTRAINT fk_wishlist_product;

ALTER TABLE wishlist
    ADD CONSTRAINT fk_wishlist_product
        FOREIGN KEY (id_product) REFERENCES products (id);

INSERT INTO wishlist(id_product, description)
VALUES ('P0001', 'Makanan Kesukaan');

mengubah behavior menghapus relasi
ALTER TABLE wishlist
    ADD CONSTRAINT fk_wishlist_product
        FOREIGN KEY (id_product) REFERENCES products (id)
            ON DELETE CASCADE ON UPDATE CASCADE;

INSERT INTO products(id, name, category, price, quantity)
VALUES ('Pxxxx', 'Contoh', 'Lain-Lain', 1000, 1000);

INSERT INTO wishlist(id_product, description)
VALUES ('Pxxxx', 'Makanan Kesukaan');

DELETE FROM products
WHERE id = 'Pxxxx';

melakukan join table
SELECT * FROM wishlist
JOIN products ON (wishlist.id_product = products.id);

SELECT products.id, products.name, wishlist.description
FROM wishlist
JOIN products ON (products.id = wishlist.id_product); 

membuat relasi ke table customers
ALTER TABLE wishlist
    ADD COLUMN id_customer INT;

ALTER TABLE wishlist
    ADD CONSTRAINT fk_wishlist_customer
        FOREIGN KEY (id_customer) REFERENCES customers(id); 

INSERT INTO customers(email, first_name, last_name)
VALUES ('suwandi@gmail.com', 'Iqbal', 'Suwandi');

UPDATE wishlist
SET id_customer = 1
WHERE id = 1;

melakukan join multiple table
SELECT 
    customers.email, 
    products.id, 
    products.name, 
    wishlist.description
        FROM wishlist
            JOIN products ON (products.id = wishlist.id_product)
            JOIN customers ON (customers.id = wishlist.id_customer);

